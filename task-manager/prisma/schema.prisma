// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String            @id
  name           String
  email          String            @unique
  about          String?
  industryType   String
  role           String
  country        String
  workspace      WorkspaceMember[]
  image          String?
  //tasks Task[]
  activities     Activity[]
  comments       Comment[]
  subscription   Subscription?     @relation(fields: [subscriptionid], references: [id])
  subscriptionid String?

  onbardingCompleted Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  Task Task[]
}

model Workspace {
  id          String            @id @default(uuid())
  name        String
  description String?
  ownerId     String?
  members     WorkspaceMember[]
  projects    Project[]
  inviteCode  String            @unique
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum AccessLevel {
  OWNER
  MEMBER
  VIEWER
}

model WorkspaceMember {
  id            String          @id @default(uuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId   String
  workspace     Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  role          String
  accessLevel   AccessLevel     @default(VIEWER)
  projectAccess ProjectAccess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, workspaceId])
}

model Project {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  tasks         Task[]
  activities    Activity[]
  comments      Comment[]
  projectAccess ProjectAccess[]
  documentation Documentation[]

  @@unique([workspaceId])
}

model ProjectAccess {
  id String @id @default(uuid())

  workspaceMemberId String
  workspaceMember   WorkspaceMember @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade)
  projectId         String
  project           Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  hasAccess         Boolean         @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workspaceMemberId, projectId])
}

model Subscription {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

model Activity {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String
  type String

  projectId String
  Project   Project @relation(fields: [projectId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId, userId])
}

model Comment {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String

  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, userId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  IN_REVIEW
  BACKLOG
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Task {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(LOW)
  startDate   DateTime
  dueDate     DateTime
  position    Int
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId  String?
  assignedTo  User?        @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  attachments File[]

  @@unique([projectId, assigneeId])
}

model File {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Task Task[]
}

model Documentation {
  id String @id @default(uuid())
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

projectId String
  Project Project @relation(fields:[projectId], references: [id], onDelete: Cascade)
}
